# @version 0.4.0

@view
@external
def getRegistries() -> DynArray[address, 10]:
    ...

# dex

@external
def swapTokens(_tokenIn: address, _tokenOut: address, _amountIn: uint256, _minAmountOut: uint256, _pool: address, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256):
    ...

@external
def addLiquidity(_pool: address, _tokenA: address, _tokenB: address, _amountA: uint256, _amountB: uint256, _minAmountOut: uint256, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256, uint256, uint256):
    ...

@external
def removeLiquidity(_lpToken: address, _lpAmount: uint256, _tokenA: address, _tokenB: address, _minAmountA: uint256, _minAmountB: uint256, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256, uint256):
    ...

# config

@external
def recoverFunds(_asset: address, _recipient: address) -> bool:
    ...

@view
@external
def legoId() -> uint256:
    ...

@external
def setLegoId(_legoId: uint256) -> bool:
    ...
