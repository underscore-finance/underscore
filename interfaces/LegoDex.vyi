# @version 0.4.0

@view
@external
def getRegistries() -> DynArray[address, 10]:
    ...

# dex

@external
def swapTokens(_tokenIn: address, _tokenOut: address, _amountIn: uint256, _minAmountOut: uint256, _pool: address, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256):
    ...

@external
def addLiquidity(_nftTokenId: uint256, _pool: address, _tokenA: address, _tokenB: address, _tickLower: int24, _tickUpper: int24, _amountA: uint256, _amountB: uint256, _minAmountA: uint256, _minAmountB: uint256, _minLpAmount: uint256, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256, uint256, uint256, uint256):
    ...

@external
def removeLiquidity(_nftTokenId: uint256, _pool: address, _tokenA: address, _tokenB: address, _lpToken: address, _liqToRemove: uint256, _minAmountA: uint256, _minAmountB: uint256, _recipient: address, _oracleRegistry: address = empty(address)) -> (uint256, uint256, uint256, uint256, uint256, bool):
    ...

@view
@external
def getLpToken(_pool: address) -> address:
    ...

# config

@external
def recoverFunds(_asset: address, _recipient: address) -> bool:
    ...

@view
@external
def legoId() -> uint256:
    ...

@external
def setLegoId(_legoId: uint256) -> bool:
    ...
